#+title: Readme
#+AUTHOR: chodkows

* Raw WebAssembly
** Numeric types
Available numeric types:
- i32
- i64
- f32
- f64

** WebAssembly function

#+begin_src bash :!tangle /home/chodkows/Git/rust/wa-snake/www/sum.wasm
(module
  (func $sum (param $a i32) (param $b i32) (result i32)
      local.get $a
      local.get $b
      i32.add
  )
  (export "sum" (func $sum))
)
#+end_src

Show assembly code from WAT code from above snippet:
#+begin_src bash :dir /home/chodkows/Git/rust/wa-snake/www :results scalar
xxd -g1 -c8 sum.wasm
#+end_src

#+RESULTS:
#+begin_example
00000000: 28 6d 6f 64 75 6c 65 0a  (module.
00000008: 20 20 28 66 75 6e 63 20    (func
00000010: 24 73 75 6d 20 28 70 61  $sum (pa
00000018: 72 61 6d 20 24 61 20 69  ram $a i
00000020: 33 32 29 20 28 70 61 72  32) (par
00000028: 61 6d 20 24 62 20 69 33  am $b i3
00000030: 32 29 20 28 72 65 73 75  2) (resu
00000038: 6c 74 20 69 33 32 29 0a  lt i32).
00000040: 20 20 20 20 20 20 6c 6f        lo
00000048: 63 61 6c 2e 67 65 74 20  cal.get
00000050: 24 61 0a 20 20 20 20 20  $a.
00000058: 20 6c 6f 63 61 6c 2e 67   local.g
00000060: 65 74 20 24 62 0a 20 20  et $b.
00000068: 20 20 20 20 69 33 32 2e      i32.
00000070: 61 64 64 0a 20 20 29 0a  add.  ).
00000078: 20 20 28 65 78 70 6f 72    (expor
00000080: 74 20 22 73 75 6d 22 20  t "sum"
00000088: 28 66 75 6e 63 20 24 73  (func $s
00000090: 75 6d 29 29 0a 29 0a     um)).).
#+end_example


#+begin_src bash :dir /home/chodkows/Git/rust/wa-snake/www :results scalar
for b in $(xxd -ps -c1 sum.wasm); do echo -n "0x$b, "; done
#+end_src

#+RESULTS:
: 0x28, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x0a, 0x20, 0x20, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x20, 0x24, 0x73, 0x75, 0x6d, 0x20, 0x28, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x20, 0x24, 0x61, 0x20, 0x69, 0x33, 0x32, 0x29, 0x20, 0x28, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x20, 0x24, 0x62, 0x20, 0x69, 0x33, 0x32, 0x29, 0x20, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x33, 0x32, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x65, 0x74, 0x20, 0x24, 0x61, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x67, 0x65, 0x74, 0x20, 0x24, 0x62, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x33, 0x32, 0x2e, 0x61, 0x64, 0x64, 0x0a, 0x20, 0x20, 0x29, 0x0a, 0x20, 0x20, 0x28, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x22, 0x73, 0x75, 0x6d, 0x22, 0x20, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x20, 0x24, 0x73, 0x75, 0x6d, 0x29, 0x29, 0x0a, 0x29, 0x0a,

Check how many bites program have:
#+begin_src bash :dir /home/chodkows/Git/rust/wa-snake/www :results scalar
stat sum.wasm
#+end_src

#+RESULTS:
:   File: sum.wasm
:   Size: 151       	Blocks: 8          IO Block: 4096   regular file
: Device: 259,2	Inode: 2883800     Links: 1
: Access: (0644/-rw-r--r--)  Uid: ( 1000/chodkows)   Gid: ( 1000/chodkows)
: Access: 2022-11-04 16:00:43.124359850 +0100
: Modify: 2022-11-04 16:00:43.124359850 +0100
: Change: 2022-11-04 16:00:43.124359850 +0100
:  Birth: 2022-11-04 16:00:43.124359850 +0100

Check WebAssembly code in web site
https://webassembly.github.io/wabt/demo/wat2wasm

** Run webassembly in the browser
*** Run simple js function
#+begin_src html :!tangle /home/chodkows/Git/rust/wa-snake/www/index.html
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Hello world</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body>
        <h1>hello world</h1>
        <script>
          function init() {
            alert("Hi There!")
          }
          init()
        </script>
    </body>
</html>

#+end_src

*** Run wasm function in html
Create int8 array and paste bytes from wasm.
Put wasm function to the [[https://webassembly.github.io/wabt/demo/wat2wasm][site]] and download code. Take bytes using *xxd -g1 sum.wasm*
In browser *byteArray* will be in decimal format insead of hex decimal
#+begin_src html :!tangle /home/chodkows/Git/rust/wa-snake/www/index.html
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Hello world</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body>
        <h1>hello world</h1>
        <script>
          async function init() {
            const byteArray = new Int8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x07, 0x01, 0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x03, 0x02, 0x01, 0x00, 0x07, 0x07, 0x01, 0x03, 0x73, 0x75, 0x6d, 0x00, 0x00, 0x0a, 0x09, 0x01, 0x07, 0x00, 0x20, 0x00, 0x20, 0x01, 0x6a, 0x0b, 0x00, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x01, 0x06, 0x01, 0x00, 0x03, 0x73, 0x75, 0x6d, 0x02, 0x09, 0x01, 0x00, 0x02, 0x00, 0x01, 0x61, 0x01, 0x01, 0x62])
            const wasm = await WebAssembly.instantiate(byteArray.buffer);
          debugger
            const sumFunction = wasm.instance.exports.sum;
            const result = sumFunction(10, 50);
            console.log(result);
          }
          init()
        </script>
    </body>
</html>

#+end_src
** Run webassebly using webpack
#+begin_src bash :dir /home/chodkows/Git/rust/wa-snake/www
npm init -y
npm install --save webpack webpack-cli webpack-dev-server
cat <<EOF > .gitignore
node_modules
EOF

#+end_src

#+RESULTS:
Move sum.wasm and index.html to public foler
#+begin_src bash :dir /home/chodkows/Git/rust/wa-snake/www
mkdir public
mv sum2.wasm public/
mv index.html public/
#+end_src

#+RESULTS:

**** Webpack configuration
#+begin_src js :!tangle /home/chodkows/Git/rust/wa-snake/www/webpack.config.js
const path = require("path");

module.exports = {
    entry: () => "./index.js",
    output: {
      path: path.resolve(__dirname, "public"),
      filename: "index.js"
    },
    mode: "development"
}
#+end_src

#+begin_src js :!tangle /home/chodkows/Git/rust/wa-snake/www/index.js
async function init() {
    const byteArray = new Int8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x07, 0x01, 0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x03, 0x02, 0x01, 0x00, 0x07, 0x07, 0x01, 0x03, 0x73, 0x75, 0x6d, 0x00, 0x00, 0x0a, 0x09, 0x01, 0x07, 0x00, 0x20, 0x00, 0x20, 0x01, 0x6a, 0x0b, 0x00, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x01, 0x06, 0x01, 0x00, 0x03, 0x73, 0x75, 0x6d, 0x02, 0x09, 0x01, 0x00, 0x02, 0x00, 0x01, 0x61, 0x01, 0x01, 0x62])
    const wasm = await WebAssembly.instantiate(byteArray.buffer);
    const sumFunction = wasm.instance.exports.sum;
    const result = sumFunction(10, 60);
    console.log(result);
}
init()
#+end_src

#+begin_src html :!tangle /home/chodkows/Git/rust/wa-snake/www/public/index.html
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Hello world</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body>
        <h1>hello world</h1>
        <script src="./index.js"></script>
    </body>
</html>
#+end_src

Add to package.json
#+begin_src
"script": {
  "dev": "webpack-dev-server"
  "build": "webpack build"
}
#+end_src"
**** Webpack config plugin
Keep only static files in public. index.html should be in www

#+begin_src html :!tangle /home/chodkows/Git/rust/wa-snake/www/index.html
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Hello world</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body>
        <h1>hello world</h1>
        <script src="./index.js"></script>
    </body>
</html>
#+end_src

Install copy webpack plugin
#+begin_src bash :dir /home/chodkows/Git/rust/wa-snake/www
npm install --save copy-webpack-plugin
#+end_src

#+begin_src js :!tangle /home/chodkows/Git/rust/wa-snake/www/webpack.config.js
const path = require("path");
const CopyWebpackPlugin = require("copy-webpack-plugin");

module.exports = {
    entry: () => "./index.js",
    output: {
      path: path.resolve(__dirname, "public"),
      filename: "index.js"
    },
    mode: "development",
    plugins: [
      new CopyWebpackPlugin({
        patterns: [
          { from: "./index.html", to: "./" }
        ]
      })
    ]
}
#+end_src
**** Fetch wasm
#+begin_src js :!tangle /home/chodkows/Git/rust/wa-snake/www/index.js
async function init() {
    const response = await fetch("sum.wasm");
    const buffer = await response.arrayBuffer();
    const wasm = await WebAssembly.instantiate(buffer);
    const sumFunction = wasm.instance.exports.sum;
    const result = sumFunction(100, 60);
    console.log(result);
}
init()
#+end_src
**** Import wasm

#+begin_src js :!tangle /home/chodkows/Git/rust/wa-snake/www/index.js
async function init() {
    const importObject = {
      console: {
        log: () => {
          console.log("Just logging something!");
        },
        error: () => {
          console.log("I am just error");
        }
      }
    }
    const response = await fetch("sum.wasm");
    const buffer = await response.arrayBuffer();
    const wasm = await WebAssembly.instantiate(buffer, importObject);
    const sumFunction = wasm.instance.exports.sum;
  debugger
    const result = sumFunction(100, 60);
    console.log(result);
}
init()
#+end_src


#+begin_src bash :!tangle /home/chodkows/Git/rust/wa-snake/www/import_test.wasm
(module
  (import "console" "log" (func $log))
  (import "console" "error" (func $error))
  (func $sum (param $a i32) (param $b i32) (result i32)
      call $log
      call $error
      local.get $a
      local.get $b
      i32.add
  )
  (export "sum" (func $sum))
)
#+end_src
* WebAssembly memory
Memory can be crated in WebAssembly and exported to JS
Memory can be crated in JS and exported to WebAssembly

*memory 1* means 1 page of memory. Page has around 64KB

Exporting memory.
*(export "mem" (memory 0))* - *mem* -handler in js. *(memory 0)* means export first created memory, so *(memory 1)* - line 4 from below snippet.

#+begin_src bash :!tangle /home/chodkows/Git/rust/wa-snake/www/export_memory.wasm
(module
  (import "console" "log" (func $log))
  (import "console" "error" (func $error))
  (memory 1)
  (func $sum (param $a i32) (param $b i32) (result i32)
      call $log
      call $error
      local.get $a
      local.get $b
      i32.add
  )
  (export "mem" (memory 0))
  (export "sum" (func $sum))
)
#+end_src

#+RESULTS:

Create alias for memory
Insted of *(export "mem" (memory 0))* in line 4 there is alias *$mem*
and we can use it as *(export "mem" (memory $mem))*
#+begin_src bash :!tangle /home/chodkows/Git/rust/wa-snake/www/export_memory.wasm
(module
  (import "console" "log" (func $log))
  (import "console" "error" (func $error))
  (memory $mem 1)
  (func $sum (param $a i32) (param $b i32) (result i32)
      call $log
      call $error
      local.get $a
      local.get $b
      i32.add
  )
  (export "mem" (memory $mem))
  (export "sum" (func $sum))
)
#+end_src

Load to memory

*(data (i32.const 0) "Hi")* - At index 0 in memory put "Hi"
#+begin_src bash :!tangle /home/chodkows/Git/rust/wa-snake/www/export_memory.wasm
(module
  (import "console" "log" (func $log))
  (import "console" "error" (func $error))
  (memory $mem 1)
  (data (i32.const 0) "Hi")
  (func $sum (param $a i32) (param $b i32) (result i32)
      call $log
      call $error
      local.get $a
      local.get $b
      i32.add
  )
  (export "mem" (memory $mem))
  (export "sum" (func $sum))
)
#+end_src

Access memory from js
Create array of two bits. Because all 64KB are empty, thats why only 2 bits.
Decode array to plain text.
#+begin_src js :!tangle /home/chodkows/Git/rust/wa-snake/www/index.js
async function init() {
    const importObject = {
      console: {
        log: () => {
          console.log("Just logging something!");
        },
        error: () => {
          console.log("I am just error");
        }
      }
    }
    const response = await fetch("sum.wasm");
    const buffer = await response.arrayBuffer();
    const wasm = await WebAssembly.instantiate(buffer, importObject);
    const sumFunction = wasm.instance.exports.sum;
    const wasmMemory = wasm.instance.exports.mem;
    const uint8Array = new Uint8Array(wasmMemory.buffer, 0, 2);
    const hiText = new TextDecoder().decode(uint8Array);

    console.log(hiText);
}
init()
#+end_src
* JS memory

*const memory = new WebAssembly.Memory({initial: 1});*
Create a memory in js. This memory will be read by WebAssembly. In WebAssembly we put "Hello". Back in JS we can read this memory.
#+begin_src js :!tangle /home/chodkows/Git/rust/wa-snake/www/index.js
async function init() {
    const memory = new WebAssembly.Memory({initial: 1});
    const importObject = {
      js: {
        mem: memory
      },
      console: {
        log: () => {
          console.log("Just logging something!");
        },
        error: () => {
          console.log("I am just error");
        }
      }
    }
    const response = await fetch("sum.wasm");
    const buffer = await response.arrayBuffer();
    const wasm = await WebAssembly.instantiate(buffer, importObject);
    const uint8Array = new Uint8Array(memory.buffer, 0, 5);
    const hiText = new TextDecoder().decode(uint8Array);

    console.log(hiText);
}
init()
#+end_src

#+begin_src bash :!tangle /home/chodkows/Git/rust/wa-snake/www/import_memory.wasm
(module
  (import "console" "log" (func $log))
  (import "console" "error" (func $error))
  (memory (import "js" "mem") 1)
  (data (i32.const 0) "Hello")
  (func $sum (param $a i32) (param $b i32) (result i32)
      call $log
      call $error
      local.get $a
      local.get $b
      i32.add
  )
  (export "sum" (func $sum))
)
#+end_src
* Preparing the Game
#+begin_src bash :dir /home/chodkows/Git/rust/wa-snake
cat << EOF > Cargo.toml
[package]
name = "wa-snake"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
wasm-bindgen = "0.2.83"

[lib]
crate-type = ["cdylib"]

EOF
#+end_src

#+RESULTS:

*#[wasm_bindgen]* macro for sharing for JS
#+begin_src rust :tangle /home/chodkows/Git/rust/wa-snake/src/lib.rs
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn great(name: &str) {
    println!("Hi there {}", name);
}
#+end_src

#+begin_src bash
cargo install wasm-pack
#+end_src

#+RESULTS:

#+begin_src bash
wasm-pack build --target web
#+end_src

#+RESULTS:
Add wasm dependency:
*"wa-snake": "file:../pkg"*
#+begin_src json :tangle /home/chodkows/Git/rust/wa-snake/www/package.json
{
  "name": "www",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "webpack-dev-server",
    "build": "webpack build"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "copy-webpack-plugin": "^11.0.0",
    "webpack": "^5.74.0",
    "webpack-cli": "^4.10.0",
    "webpack-dev-server": "^4.11.1",
    "wa-snake": "file:../pkg"
  },
  "description": ""
}
#+end_src

#+begin_src bash :dir /home/chodkows/Git/rust/wa-snake/www :results scalar
npm install
#+end_src

#+RESULTS:
:
: up to date, audited 327 packages in 862ms
:
: 42 packages are looking for funding
:   run `npm fund` for details
:
: found 0 vulnerabilities

Init is exported as default. Greet is exported as function.
#+begin_src js :tangle ~/Git/rust/wa-snake/www/index.js
import init, { great } from "wa-snake";

async function start() {
  const wasm = await init();
  great("Wojtek");
  console.log("Hello");
}
start()
#+end_src

Alternative
#+begin_src js :!tangle ~/Git/rust/wa-snake/www/index.js
import init from "wa-snake";

async function start() {
  const wasm = await init();
  wasm.great("Wojtek");
  console.log("Hello");
}
start()
#+end_src


Alternative
#+begin_src js :!tangle ~/Git/rust/wa-snake/www/index.js
import init, { great } from "wa-snake";

init().then(wasm => {
  wasm.great("Wojtek");
  console.log("Hello");
})
#+end_src
